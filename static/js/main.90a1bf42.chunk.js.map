{"version":3,"sources":["Components/Loading.tsx","Views/NoMatch.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","NoMatch","Home","React","lazy","then","default","About","History","Login","Register","App","fallback","path","exact","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qOAEA,SAASA,IACT,OACE,2CCFF,SAASC,IACT,OACE,wJCOF,IAAMC,EAAOC,IAAMC,MAAK,kBAAM,0EAAwBC,MAAK,kBAAa,CAACC,QAAd,EAAEJ,YACvDK,EAAQH,gBAAK,kBAAM,oDAAwBC,MAAK,kBAAc,CAACC,QAAf,EAAEC,aAClDC,EAAUJ,gBAAK,kBAAM,0EAA0BC,MAAK,kBAAgB,CAACC,QAAjB,EAAEE,eACtDC,EAAQL,gBAAK,kBAAM,mEAAwBC,MAAK,kBAAc,CAACC,QAAf,EAAEG,aAClDC,EAAWN,gBAAK,kBAAM,mEAA2BC,MAAK,kBAAiB,CAACC,QAAlB,EAAEI,gBAuC/CC,MApCf,WACE,OACE,6BACE,kBAAC,IAAD,KAEE,kBAAC,WAAD,CAAUC,SAAU,kBAACZ,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,SACV,kBAACX,EAAD,OAEF,kBAAC,IAAD,CAAOW,KAAK,YACV,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,UACV,kBAACN,EAAD,OAEF,kBAAC,IAAD,CAAOM,KAAK,UACV,kBAACJ,EAAD,OAEF,kBAAC,IAAD,CAAOI,KAAK,aACV,kBAACH,EAAD,OAEF,kBAAC,IAAD,CAAOI,OAAK,EAACD,KAAK,KAChB,kBAAC,IAAD,CAAUE,GAAG,WAEf,kBAAC,IAAD,CAAOF,KAAK,KACV,kBAACZ,EAAD,YChCMe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEH,kBAAC,EAAD,MAEJC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.90a1bf42.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Loading() {\r\nreturn(\r\n  <div>Loading...</div>\r\n)\r\n}\r\nexport {Loading}","import React from \"react\";\r\n\r\nfunction NoMatch() {\r\nreturn (\r\n  <h1>\r\n    你输入的路径不对，请核对路径后重新进入。\r\n  </h1>\r\n)\r\n}\r\nexport {NoMatch}","import React, {lazy, Suspense} from \"react\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport {Loading} from \"./Components/Loading\";\nimport {NoMatch} from \"./Views/NoMatch\";\n\n\nconst Home = React.lazy(() => import( \"./Views/Home\").then(({Home}) => ({default: Home})));\nconst About = lazy(() => import(\"./Views/About\").then(({About}) => ({default: About})));\nconst History = lazy(() => import(\"./Views/History\").then(({History}) => ({default: History})));\nconst Login = lazy(() => import(\"./Views/Login\").then(({Login}) => ({default: Login})));\nconst Register = lazy(() => import(\"./Views/Register\").then(({Register}) => ({default: Register})));\n\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n\n        <Suspense fallback={<Loading/>}>\n          <Switch>\n            <Route path='/home'>\n              <Home/>\n            </Route>\n            <Route path='/history'>\n              <History/>\n            </Route>\n            <Route path='/about'>\n              <About/>\n            </Route>\n            <Route path='/login'>\n              <Login/>\n            </Route>\n            <Route path='/register'>\n              <Register/>\n            </Route>\n            <Route exact path=\"/\">\n              <Redirect to=\"/home\"/>\n            </Route>\n            <Route path='*'>\n              <NoMatch/>\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n      <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}